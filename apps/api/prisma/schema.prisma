generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  name          String?
  email         String     @unique
  phone         String?
  address       String?
  passwordHash  String?    @map("password_hash")
  active        Boolean?   @default(true)
  avatarUrl     String?    @map("avatar_url")
  tokens        Token[]
  accounts      Account[]
  owns_business Business[]
  members       Member[]
  schedules     Schedule[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id     String    @id @default(uuid())
  type   TokenType
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String    @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("tokens")
}

enum AccountProvider {
  GITHUB
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String          @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

enum Role {
  ADMIN
  EMPLOYEE
  CLIENT
  BILLING
}

model Member {
  id         String     @id @default(uuid())
  role       Role       @default(CLIENT)
  business   Business   @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String     @map("business_id")
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String     @map("user_id")
  schedules  Schedule[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([businessId, userId])
  @@map("members")
}

model Business {
  id                        String     @id @default(uuid())
  name                      String
  slug                      String     @unique
  domain                    String?    @unique
  shouldAttachUsersByDomain Boolean    @default(false) @map("should_attach_users_by_domain")
  avatarUrl                 String?    @map("avatar_url")
  owner                     User       @relation(fields: [ownerId], references: [id])
  ownerId                   String     @map("owner_id")
  members                   Member[]
  products                  Product[]
  services                  Service[]
  schedules                 Schedule[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("business")
}

model Product {
  id          String         @id @default(uuid())
  name        String
  description String
  price       Decimal        @db.Decimal(10, 2)
  business    Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId  String         @map("business_id")
  images      ProductImage[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([businessId, name])
  @@map("products")
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")

  @@map("product_images")
}

model Service {
  id          String     @id @default(uuid())
  name        String
  description String     @db.VarChar(500)
  business    Business   @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId  String     @map("business_id")
  schedules   Schedule[]

  @@unique([businessId, name])
  @@map("services")
}

model Schedule {
  id           String   @id @default(uuid())
  observations String   @db.VarChar(500)
  member       Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId     String   @map("member_id")
  service      Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId    String   @map("service_id")
  owner        User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String   @map("user_id")
  business     Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId   String   @map("business_id")
  date         DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("schedules")
}
